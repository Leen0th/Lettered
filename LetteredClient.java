/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clientphase1game;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import java.awt.event.*;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.JList;

/**
 *
 * @author developer
 */
public class LetteredClient extends javax.swing.JFrame {

    
    Socket socket;
    BufferedReader input;
    PrintWriter output;
    String username = "";
    boolean connected = false;
    String connectedNames;
    private boolean GamePlayed;
    private boolean isMyRequest = false;
    int port = 5000;
    InetAddress address;
    String ServerAddress;
    
    //arays
    ArrayList<String> Winners = new ArrayList<>();
    ArrayList<String> connectors = new ArrayList<>();
    
    //Creates new form ClientGame
    public LetteredClient() {
        initComponents();

        //disable the play button before you connect
        PlayGameButton.setEnabled(false); //Disable play button until  the user is connected.
        PlayerAction();// this will Update player list from the server.
    }
    
    private void clearAndNotifyGameExit() throws IOException {
    // Clear the display of clients in the game member list
    DefaultListModel listModel = (DefaultListModel) GameMemberList.getModel();
    // Remove the current user from the list model
    listModel.removeElement(username);
    // Set a new, empty list model to the GameMemberList to ensure it is cleared
    GameMemberList.setModel(new DefaultListModel<>());
    // Request the UI to refresh the GameMemberList component to show changes
    GameMemberList.updateUI();
    // Log the action indicating the user has not stopped playing yet
    System.out.println("Player continues: " + username);
    // Send a command to the server indicating this player has finished the game
    output.println("finish_game#" + username);
    // Ensure the command is sent immediately
    output.flush();
}

    void  establishServerConnection() {
        
    boolean isValid = false;

    while (!isValid) {
        username = JOptionPane.showInputDialog(this, "Enter Username", "");
        ServerAddress = JOptionPane.showInputDialog(this, "Enter Server IP", "127.0.0.1");

        // Validate both username and server IP
        if (!ServerAddress.isEmpty() && username != null && !username.trim().isEmpty()) {
            isValid = true;
        } 
        else {
            // Show error message specific to the error
            if (ServerAddress.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Server IP cannot be empty");
            } 
            else if (username == null || username.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Username cannot be empty");
            }
        }
    }

    if (isValid) {
        connectToServer(ServerAddress, username);
    } else {
        // Handle cancellation of connection attempt.
    }
}

private void connectToServer(String serverAddress, String username) {
    try {
        address = InetAddress.getByName(serverAddress);
        socket = new Socket(serverAddress, port);
        input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        output = new PrintWriter(socket.getOutputStream(), true);
        
        output.println("Name:" + username);
        output.flush();
    } 
    catch (UnknownHostException ex) {
        System.out.println("Host unknown: " + ex.getMessage());
    } 
    catch (IOException ex) {
        System.out.println("IO Exception: " + ex.getMessage());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ConnectButton = new javax.swing.JButton();
        PlayGameButton = new javax.swing.JButton();
        AnswerTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        newPlayerNotificationsLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ConnectedList = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        GameMemberList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setPreferredSize(new java.awt.Dimension(717, 435));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ConnectButton.setBackground(new java.awt.Color(66, 40, 185));
        ConnectButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        ConnectButton.setForeground(new java.awt.Color(255, 255, 255));
        ConnectButton.setText("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ConnectButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, -1, -1));

        PlayGameButton.setBackground(new java.awt.Color(66, 40, 185));
        PlayGameButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        PlayGameButton.setForeground(new java.awt.Color(255, 255, 255));
        PlayGameButton.setText("Play");
        PlayGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayGameButtonActionPerformed(evt);
            }
        });
        getContentPane().add(PlayGameButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 30, -1, -1));
        getContentPane().add(AnswerTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 370, 202, -1));

        jButton1.setBackground(new java.awt.Color(66, 40, 185));
        jButton1.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 370, 128, -1));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 336, 240));

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(210, 104, 146));
        jLabel3.setText("Game Dashboard");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 100, -1, -1));
        getContentPane().add(newPlayerNotificationsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(691, 63, 76, -1));

        ConnectedList.setName("ConnectedList"); // NOI18N
        jScrollPane3.setViewportView(ConnectedList);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 154, 240));

        jLabel4.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(210, 104, 146));
        jLabel4.setText("Connected Users");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jScrollPane1.setViewportView(GameMemberList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 120, 154, 240));

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(210, 104, 146));
        jLabel2.setText("Players");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 100, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clientphase1game/background.png"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(-530, -160, 1500, 630));

        pack();
    }// </editor-fold>//GEN-END:initComponents
//timer for the game

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        output.println("end#" + username); 
        output.flush();        
    }//GEN-LAST:event_formWindowClosed

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
// Update label to indicate the players section
    jLabel2.setText("Players");
    jLabel2.setForeground(Color.black);
    
    if (!connected) {
        // Establish server connection
        establishServerConnection();
        ConnectButton.setText("Disconnect");
        ConnectButton.setBackground(new java.awt.Color(181, 70, 70));
        connected = true;
        PlayGameButton.setEnabled(true);
        jTextArea1.setEnabled(false);// Prevent text input in the game area by players
        
        
    } else {
        // Handle disconnection 
        try {
            ClientDissconnect();
            ConnectButton.setText("Connect");
            ConnectButton.setBackground(new java.awt.Color(66, 40, 185));
            connected = false;
            PlayGameButton.setEnabled(false);
            GameMemberList.removeAll();
            ConnectedList.removeAll();
        } catch (IOException ex) {
            System.out.println("Disconnection error: " + ex.getMessage());
        }
    }
    
    // Perform player action updates
    PlayerAction();
    }//GEN-LAST:event_ConnectButtonActionPerformed

     public void displayPlayersAndConnectors(String clients) {
    // Set the UI label to display "Players" and set the text color to black for visibility
    jLabel2.setText("Players");
    jLabel2.setForeground(Color.black);

    // Only process the string if it includes the keyword "Points", indicating player scores are present
    if (clients.contains("Points")) {
        // Split the input string into individual player entries based on "#" delimiter
        String[] allPlayers = clients.split("#");
        ArrayList<String> players = new ArrayList<>();
        ArrayList<String> connectors = new ArrayList<>();

        // Iterate over each parsed player string to process further
        for (String player : allPlayers) {
            // Determine the player's status (Playing, Connected, or None)
            String status = getPlayerStatus(player);
            switch (status) {
                case "Playing":
                    // Remove the keyword "Playing" from the player string and add to players list
                    String playerWithoutPlaying = player.replace("Playing", "");
                    players.add(playerWithoutPlaying);
                    System.out.println("Added to players list: " + playerWithoutPlaying);  // Debugging output
                    // Fall through to "Connected" case to handle players who are both playing and connected
                case "Connected":
                    // Clean the player string by removing score information and keywords "Connected" or "Playing"
                    String cleanedConnector = player.replaceAll("\\[Points: \\d+\\]", "")
                                                    .replace("Connected", "")
                                                    .replace("Playing", "");
                    connectors.add(cleanedConnector);
                    System.out.println("Added to connectors list: " + cleanedConnector);  // Debugging output
                    break;
                default:
                    // No action needed if the player does not match the expected statuses
                    System.out.println("No relevant status found for: " + player);  // Debugging output
                    break;
            }
        }

        // Update the UI lists for game members and connected users
        updateGameMemberList(players);
        updateConnectedList(connectors);
    }
}

    private void PlayGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayGameButtonActionPerformed
        if (connected) {
            if (!GamePlayed) {
                isMyRequest = true;
                PlayGameButton.setText("Exit");
                PlayGameButton.setBackground(new java.awt.Color(181, 70, 70));
                GamePlayed = true;
                ProcessGamePlay();
            } else {
                try { 
                    clearAndNotifyGameExit();
                    PlayGameButton.setText("Play:");
                    PlayGameButton.setBackground(new java.awt.Color(66, 40, 185));
                    GamePlayed = false;
                    isMyRequest = false;
                } catch (IOException ex) {
                    System.out.println("Error: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, 
    "Please establish a server connection before starting the game.", 
    "Connection Required", 
    JOptionPane.ERROR_MESSAGE);

        }
        
        PlayerAction();
        
    }//GEN-LAST:event_PlayGameButtonActionPerformed
 void ProcessGamePlay() {

        output.println("Play:" + username);
        output.flush();
    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (output != null) {
            output.println("end#" + username);
            output.flush();
        }
        // Close resources safely
        if (output != null) {
            output.close();
        }
        if (input != null) {
            try {
                input.close();
            } catch (IOException ex) {
                Logger.getLogger(LetteredClient.class.getName()).log(Level.SEVERE, "Error closing input stream", ex);
            }
        }
        if (socket != null) {
            try {
                socket.close();
            } catch (IOException ex) {
                Logger.getLogger(LetteredClient.class.getName()).log(Level.SEVERE, "Error closing socket", ex);
            }
        }


    }//GEN-LAST:event_formWindowClosing

    private String getPlayerStatus(String player) {
    // Check if the player string contains "Playing" or "Connected" and return the respective status
    if (player.contains("Playing")) return "Playing";
    if (player.contains("Connected")) return "Connected";
    return "None";  // Return "None" if neither status is found
}

private void updateGameMemberList(ArrayList<String> players) {
    DefaultListModel<String> model = new DefaultListModel<>();
    players.forEach(model::addElement);
    GameMemberList.setModel(model);
}

private void updateConnectedList(ArrayList<String> connectors) {
    DefaultListModel<String> model = new DefaultListModel<>();
    connectors.forEach(model::addElement);
    ConnectedList.setModel(model);
}


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (AnswerTextField.getText() != null && AnswerTextField.getText().length() > 0) {

            if (output != null) {
                output.println("Answer " + username + " " + AnswerTextField.getText());
                output.flush();

            }
            AnswerTextField.setText("");
        }
    }//GEN-LAST:event_jButton1ActionPerformed





public void Winner(String Clients) throws IOException {
        System.out.println(Clients);
        GamePlayed=false;
        if (Clients.contains("Loser")) {

            jLabel2.setText("WINNERS!!");
            jLabel2.setForeground(Color.RED);
            ConnectButton.setText("Connect");
            ConnectButton.setBackground(new java.awt.Color(181, 70, 70));
            connected = false;
            PlayGameButton.setText("Play");
            PlayGameButton.setEnabled(false);
            Clients = Clients.replaceAll("\\[Points: \\d\\]Connected #", "");
            String[] allPlayers = Clients.split("#");
            System.out.println(Arrays.toString(allPlayers));
            ArrayList<String> Winners = new ArrayList<String>();
            ArrayList<String> connectors = new ArrayList<String>();
            if (!Clients.contains("Winner")) {
                jTextArea1.setText("You lost No one won");
            } else {
                boolean winner = false;
                for (int i = 0; i < allPlayers.length; i++) {
                    if (allPlayers[i].contains("Winner") && allPlayers[i].contains(username)) {
                        jTextArea1.setText("You Won Congratulations ");
                        winner = true;
                    }

                    if (allPlayers[i].contains("Winner")) {
                        Winners.add(allPlayers[i]);

                    }
                }
           
            if (!winner) {
                jTextArea1.setText("You lost the game");
            } 
            }
            System.out.println(Arrays.toString(Winners.toArray()));

            GameMemberList.setModel(new DefaultListModel<String>() {

                @Override
                public int getSize() {
                    return Winners.size();
                }

                @Override
                public String getElementAt(int i) {
                    return Winners.get(i);
                }
            });
            ConnectedList.setModel(new DefaultListModel<String>() {

                @Override
                public int getSize() {
                    return connectors.size();
                }

                @Override
                public String getElementAt(int i) {
                    return connectors.get(i);
                }
            });
        }

    }

    private void ClientDissconnect() throws IOException {
        //clear the whole displayed clients 

        // end clear  model
        output.println("end#" + username);
        output.flush();
        output.close();
        input.close();
        socket.close();
    }

   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LetteredClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LetteredClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LetteredClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LetteredClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LetteredClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AnswerTextField;
    private javax.swing.JButton ConnectButton;
    private javax.swing.JList<String> ConnectedList;
    private javax.swing.JList<String> GameMemberList;
    private javax.swing.JButton PlayGameButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel newPlayerNotificationsLabel;
    // End of variables declaration//GEN-END:variables

    private void PlayerAction() {
        if (connected) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        while (true) {
                            connectedNames = input.readLine();
                            if (connectedNames != null) {
               
                                if (connectedNames.contains("Notify:")) {
                                   
                                    newPlayerNotificationsLabel.setText("new request ...");
                                    Thread.sleep(500l);
                                    newPlayerNotificationsLabel.setText("");

                                } else if (connectedNames.contains("Try")) {
                                    jTextArea1.setText(connectedNames);

                                } else if (connectedNames.contains("Sorry")) {
                                    jTextArea1.setText(connectedNames);

                                } else if (connectedNames.contains("Waiting")) {
                                    jTextArea1.setText(connectedNames);

                                } else if (connectedNames.contains("Number")) {
                                    jTextArea1.setText(connectedNames);

                                } else if (connectedNames.contains("Winner #") || connectedNames.contains("Loser #")) {
                                    jTextArea1.setText("");
                                    Winner(connectedNames);
                                    jTextArea1.disable();

                                    ClientDissconnect();

                                } else if (!connectedNames.contains("Points")) {
                                    jTextArea1.setText(jTextArea1.getText() + "\n" + connectedNames);

                                } else {

                                    System.out.println("updates Recieved From server " + connectedNames);
                                    displayPlayersAndConnectors(connectedNames);
                                }

                                if (connectedNames.contains("you")) {
                                    jTextArea1.setText(jTextArea1.getText() + "\n" + connectedNames);

                                }
                                if (!(connectedNames.contains("Winner #") || connectedNames.contains("Loser #"))) {

                                    displayPlayersAndConnectors(connectedNames);
                                }
                            }
                        }

                    } catch (IOException ex) {
                        //System.out.println(ex.getMessage());
                    } catch (InterruptedException ex) {
                        Logger.getLogger(LetteredClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            t.start();
        }
    }
    
}
